-module(ppm).

-export([write/2, writer/2, read/1, reader/2]).


write(File, {P, Size, Depth, Image}) ->
    {ok, Fd} = file:open(File, [write]),
    write_type(Fd, P),
    write_comment(Fd, "generated by ppm.erl"),
    write_size(Fd, Size),
    write_depth(Fd, Depth),
    write_lines_seq(Image, Fd, P),
    file:close(Fd).

write_lines_seq([], _Fd, _P) ->
    ok;
write_lines_seq([Line|Lines], Fd, P) ->
    Chars = encode(P, Line),
    ok = file:write(Fd, Chars),
    write_lines_seq(Lines, Fd,P).



writer(File, Out) ->
    spawn_link(fun() -> write_init(File, Out) end).

write_init(File, Out) ->
    {ok, Fd} = file:open(File, [write]),    
    receive 
	{header, {P, Size, Depth}} ->
	    write_type(Fd, P),
	    write_size(Fd, Size),
	    write_depth(Fd, Depth),
	    write_lines(Fd, P),
	    file:close(Fd),
	    Out ! done
    end.

write_lines(Fd, P) ->
    receive
	{line, _N, Line} ->
	    Chars = encode(P, Line),
	    ok = file:write(Fd, Chars),
	    write_lines(Fd,P);
	done ->
	    ok
    end.


read(File) ->
    {ok, Fd} = file:open(File, [read]),
    P = read_type(Fd),
    {_Comments, {Width, Height}} = read_size(Fd, []),
    Depth = read_depth(Fd),
    Image = read_lines(Height, 1, Width, P, Fd),
    file:close(Fd),
    {P, {Width, Height}, Depth, Image}.

read_lines(0, _N, _Width, _P, _Fd) ->
    [];
read_lines(Row, N, Width, P, Fd) ->
    {ok, Line} = read_line(Fd, P, Width),
    [decode(P, Line)|read_lines(Row-1, N+1, Width, P, Fd)].



reader(File, Out) ->
    spawn_link(fun() -> reader_init(File, Out) end).


reader_init(File, Out) ->
    {ok, Fd} = file:open(File, [read]),
    P = read_type(Fd),
    {_Comments, {Width, Height}} = read_size(Fd, []),
    Depth = read_depth(Fd),
    Out ! {header,  {P, {Width, Height}, Depth}},
    read_lines(Height, 1, Width, P, Fd, Out),
    file:close(Fd).

read_lines(0, _N, _Width, _P, _Fd, Out) ->
    Out ! done;
read_lines(Row, N, Width, P, Fd, Out) ->
    {ok, Line} = read_line(Fd, P, Width),
    Out ! {line, N, decode(P, Line)},
    read_lines(Row-1, N+1, Width, P, Fd, Out).

read_line(Fd, rgb, Width) ->
    file:read(Fd, Width*3);
read_line(Fd, gray, Width) ->
    file:read(Fd, Width);
read_line(Fd, bw, Width) ->
    file:read(Fd, (Width div 8)).

% Encoding and decoding RGB, gray scale or b/w images.

encode(rgb, Line) ->
    rgb_to_chars(Line);
encode(gray, Line) ->
    gray_to_chars(Line);
encode(bw, Line) ->
    bw_to_chars(Line).

rgb_to_chars(Line) ->
    lists:foldr(fun({R,G,B}, A) -> [R, G, B | A] end, [], Line).

gray_to_chars(Line) ->
    Line.

bw_to_chars([]) ->
    [];
bw_to_chars([A1,A2,A3,A4,A5,A6,A7,A8|Line]) ->
    [<<A1:1,A2:1,A3:1,A4:1,A5:1,A6:1,A7:1,A8:1>>| bw_to_chars(Line)].


decode(rgb, Chars) ->
    chars_to_rgb(Chars);
decode(gray, Chars) ->
    chars_to_gray(Chars);
decode(bw, Chars) ->
    chars_to_bw(Chars).


chars_to_rgb([]) ->
    [];
chars_to_rgb([R,G,B|Line]) ->
    [{R,G,B} | chars_to_rgb(Line)].


chars_to_gray(Chars) ->
    Chars.

chars_to_bw([<<A1:1,A2:1,A3:1,A4:1,A5:1,A6:1,A7:1,A8:1>>|Chars])->
    [A1,A2,A3,A4,A5,A6,A7,A8|chars_to_bw(Chars)].


% Reading and writing header information

read_type(Fd) ->
    case file:read_line(Fd) of
	{ok, "P6\n"} -> rgb;
	{ok, "P5\n"} -> gray;
	{ok, "P4\n"} -> bw;
	_ -> error
    end.


read_size(Fd, Comments) ->
    case file:read_line(Fd) of
	{ok, [$#|Comment]} ->
	    read_size(Fd, [Comment|Comments]);
	{ok, Line}  ->
	    {lists:reverse(Comments), 
	     {list_to_integer(lists:takewhile(fun(C) -> C =/= 32 end, Line)), 
	      list_to_integer(lists:takewhile(fun(C) -> C =/= 10 end, lists:dropwhile(fun(C) -> C == 32 end, lists:dropwhile(fun(C) -> C =/= 32 end, Line))))}};
	_ ->
	    error
    end.

read_depth(Fd) ->
    case file:read_line(Fd) of
	{ok, Line} -> 
	    list_to_integer(lists:takewhile(fun(C) -> C =/= 10 end,Line));
	_ -> 
	    error
    end.



write_type(Fd, P) ->
    case P of
	rgb ->
	    file:write(Fd, "P6\n");
	gray ->
	    file:write(Fd, "P5\n");
	bw ->
	    file:write(Fd, "P4\n")
    end.

write_comment(Fd, Comment) ->
    io:format(Fd, "#~s~n", [Comment]).

write_size(Fd, {W,H}) ->
    file:write(Fd, integer_to_list(W) ++ " " ++ integer_to_list(H) ++ "\n").

write_depth(Fd, D) ->
    file:write(Fd, integer_to_list(D) ++ "\n").

    
    
